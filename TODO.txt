NOTE: this todo list is out of data. Most of the below no longer relevant.

TODO: update the TODO list. :)


Things that need work: (-) TODO (*) DONE (o) Obsolete
 - Inject events should check for HTTPCmdProcessed events and directly place them on the http bus
 - Audit all other places where we produce HTTPCmdProcessed events and put them on the http bus
 - remove the http listener from the general internal bus

 - fold together the instantiate_helpers as much as possible (much duplicate code here)
 - need to address all of the new "data mapping" functions that were added that only convert enums to strings

 - subscription should not allow duplicates
 - move etag into the aggregate, invalidate cache on etag update

 - TELEMETRY:  need to have telemetry service up and running to do metric reports, triggers, and such

 * expanduri formatter
 * EPHEMERAL resource property
     - values returned by plugins are now ephemeral by default and not saved in the redfishresourceproperty after being returned up the stack. this prevents excessive mem usage

 * SELECT  EC.*

 o validator system for models? Attach functions that observe and validate. Ability to refuse and return an error?

 - Schema Meta builder

 - Event Service Server for legacy POST/PATCH/PUT
 - Support PATCH for generic (no-code update to allow patching resource that were created with curl)
 - PUT/PATCH/POST support
    * basic PATCH support controlled by @meta["PATCH"]["allowed"] = true
    - Add validation plugin support

 - Fix HTTPs apis to allow specifying api: server
 o re-add spacemonkey
 - Systemd
    * service file
    - socket activation support

 - split the handlers for internal redfishresource aggregate commands and the "official" redfish handler

 - Dynamically generate metadata
    - Need to dynamically generate the odata metadata endpoints based on what objects are actually present in-tree
        - probably need to update createredfishresource to have a mandatory parameter specifying the schema

 - implement for GET:
    - $expand

 - SupportedMethods support: have a way to return allowed methods in the header.

 - Redfish compliant HTTP ERROR responses
    - some generic boilerplate to do this?
    - Need some generic domain redfish error helpers to handle generating JSON output and http error codes

 - DELETE
    * DELETE Implemented
    - can return GET representation of the deleted object (optional per spec, lets try to do it)
    - Need to return http 405 for undeletable, or when trying to delete a collection

 - CERTIFICATE support:
    * SSL support
    * Automatically generate CA and Server Cert
    * Add net.InterfaceAddrs() - list of all local IP addresses - to the SAN list
    - move certs to subdir
    - Get local hostname and add to SAN list
    - Some sort of notification to regenerate the local SSL certificate if interfaces change?

 - AccountService
    - Interesting case: PAM? getent passwd? Automatically create? How to get privileges? (PAM, too?)
    - Really ought to have strong support for oauth here. (so that redfish never needs to handle the actual password)

 - Chassis

 - Schema support: should aggregate load the metadata/json schema and automatically populate? Should it validate?

 - LINK Header

 - Common redfish resource properties
    - Do we need to do some special handling for the following properties, which are all specified as standard redfish resource properties?
        - Id
        - Name
        - Description
        - Status
        - Links
        - Members
        - RelatedItem
        - Actions
        - Oem

 - Generic TASK Service


==================
= Completed tasks
==================
 * performance: unix domain socket proxypass?
 * performance: proxypass keepalive?
 * performance:
 * implement for GET:
    * $skip
    * $top
    * $select
    * $filter

 * fix instantiate from awesome mapper
    - done: now semi-reentrant if you use the postproc facility (this is implemented everywhere it's currently used. See MakeMaker() in instantiate-helpers.go)
 * subscription create should return the actual resource
    - done

 * EVENTS
    * implement an http endpoint to inject raw events into the system (internal command)

 * GET aggregate plugin support:
    * Need to filter out @meta from Properties
    * Need to load plugins for each property
    * Example plugin for replacement of values on GET (Strategy 3 in plugins/test/readme.txt)
    * example plugin for processing event stream and replacing values (Strategy 1 in plugins/test/readme.txt)

 * ACTIONS
    * Implement a test OEM action for reference
        * obmc now also implements reset action (test)
        * see scripts/test.sh, plugins/test_action/. These implement example action

 * Figure out if event data should be pointer or struct - (should be a struct)

 * Event Service:
    * EventService (redfish URI) - done
    * Test Submit Event API
    * EventService Subscriptions - create/remove
    * Redfish SSE server
        * create subscription on attach
        * delete subscription on end
        * force session to end on delete of subscrioption
    - Event server (separate binary to POST redfish events)

 * eventwaiter interface - stop passing *ew around everywhere, use interface instead
    -- accept interfaces, return objects

 * ETAGS support.
    * etags are stored as a property per redfish spec, "@odata.etag".
    * the handler will scan all aggregates that we serialize out for an instance of @odata.etag property, and set the HTTP Etag header, if present
    * The redfish handler will, check the If-Match and If-None-Match HTTP headers
    * Have standard model support: etags can be pulled from a model
    * Have a standard view option to help update model etag generation id on updates
