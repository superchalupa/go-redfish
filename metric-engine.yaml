main:
    server_name: idrac
    databasepath: file:telemetry_timeseries_database.db?_foreign_keys=on&cache=shared&mode=rwc
    udbdatabasepath: file:DMLiveObjectDatabase.db?cache=shared&_foreign_keys=off&mode=ro
    shmdatabasepath: file:SHM.db?cache=shared&_foreign_keys=off&mode=ro
    udbnotifypipe: udbtdbipcpipe

listen:
  #- unix:me.socket
  # enable 8080 port only for testing, as per NCC audit it needs to be disabled on the build
  - http::8081
  #  enable pprof only for debuging, it causes increased memory consumption. If memprofilerate>0, it will use way more. It's set to 0 in the service file.
  - pprof::9081
  # disable direct https listener, uncomment if needed for testing:
  # - https::8443


##############################################
##
## MEB Questions: why do we have separate CurrentCUPS from the CIMVIEW_DCIM_NumericSensor table?
##
## TODO: CIMVIEW_DCIM_NumericSensorPS table -> make sure we are importing the metrics we need from here
##
##############################################

Startup-Events:
  # PowerStatistics, PowerMetrics, 0x17||Fan.Embedded.6, NIC.Integrated.1-2-1

  ###########################################################################3
  ## TODO Legacy reports
  ###########################################################################3
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "CPURegisters",         "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": []
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "CPUSensor",            "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [{"MetricID": "TemperatureReading", "FQDDPattern": "iDRAC.Embedded.1#CPU%Temp"}]
      }
  - name: AddMetricReportDefinition
    # TODO: Need to limit this to FC via FQDD
    data: |
      {
        "Name": "FCSensor",             "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [{"MetricID": "TemperatureReading", "FQDDPattern": "%"}]
      }
  - name: AddMetricReportDefinition
    # TODO: Need to limit this to FPGA via FQDD
    data: |
      {
        "Name": "FPGASensor",           "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [{"MetricID": "TemperatureReading", "FQDDPattern": "%"}]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "MemorySensor",         "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [{"MetricID": "TemperatureReading", "FQDDPattern": "DIMM.Socket.%"}]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "NICSensor",            "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [{"MetricID": "TemperatureReading", "FQDDPattern": "NIC.%"}]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "NICStatistics",        "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "MetricId": "DiscardedPkts", "FQDDPattern": "NIC.%"},
          { "MetricId": "FCCRCErrorCount", "FQDDPattern": "NIC.%"},
          { "MetricId": "FCOELinkFailures", "FQDDPattern": "NIC.%"},
          { "MetricId": "FCOEPktRxCount", "FQDDPattern": "NIC.%"},
          { "MetricId": "FCOEPktTxCount", "FQDDPattern": "NIC.%"},
          { "MetricId": "FCOERxPktDroppedCount", "FQDDPattern": "NIC.%"},
          { "MetricId": "LanFCSRxErrors", "FQDDPattern": "NIC.%"},
          { "MetricId": "LanUnicastPktRxCount", "FQDDPattern": "NIC.%"},
          { "MetricId": "LanUnicastPktTxCount", "FQDDPattern": "NIC.%"},
          { "MetricId": "LinkStatus", "FQDDPattern": "NIC.%"},
          { "MetricId": "OSDriverState", "FQDDPattern": "NIC.%"},
          { "MetricId": "PartitionLinkStatus", "FQDDPattern": "NIC.%"},
          { "MetricId": "PartitionOSDriverState", "FQDDPattern": "NIC.%"},
          { "MetricId": "RDMARxTotalBytes", "FQDDPattern": "NIC.%"},
          { "MetricId": "RDMARxTotalPackets", "FQDDPattern": "NIC.%"},
          { "MetricId": "RDMATotalProtectionErrors", "FQDDPattern": "NIC.%"},
          { "MetricId": "RDMATotalProtocolErrors", "FQDDPattern": "NIC.%"},
          { "MetricId": "RDMATxTotalBytes", "FQDDPattern": "NIC.%"},
          { "MetricId": "RDMATxTotalPackets", "FQDDPattern": "NIC.%"},
          { "MetricId": "RDMATxTotalReadReqPkts", "FQDDPattern": "NIC.%"},
          { "MetricId": "RDMATxTotalSendPkts", "FQDDPattern": "NIC.%"},
          { "MetricId": "RDMATxTotalWritePkts", "FQDDPattern": "NIC.%"},
          { "MetricId": "RxBroadcast", "FQDDPattern": "NIC.%"},
          { "MetricId": "RxBytes", "FQDDPattern": "NIC.%"},
          { "MetricId": "RxErrorPktAlignmentErrors", "FQDDPattern": "NIC.%"},
          { "MetricId": "RxErrorPktFCSErrors", "FQDDPattern": "NIC.%"},
          { "MetricId": "RxFalseCarrierDetection", "FQDDPattern": "NIC.%"},
          { "MetricId": "RxJabberPkt", "FQDDPattern": "NIC.%"},
          { "MetricId": "RxMutlicast", "FQDDPattern": "NIC.%"},
          { "MetricId": "RxPauseXOFFFrames", "FQDDPattern": "NIC.%"},
          { "MetricId": "RxPauseXONFrames", "FQDDPattern": "NIC.%"},
          { "MetricId": "RxRuntPkt", "FQDDPattern": "NIC.%"},
          { "MetricId": "RxUnicast", "FQDDPattern": "NIC.%"},
          { "MetricId": "TxBroadcast", "FQDDPattern": "NIC.%"},
          { "MetricId": "TxBytes", "FQDDPattern": "NIC.%"},
          { "MetricId": "TxErrorPktExcessiveCollision", "FQDDPattern": "NIC.%"},
          { "MetricId": "TxErrorPktLateCollision", "FQDDPattern": "NIC.%"},
          { "MetricId": "TxErrorPktMultipleCollision", "FQDDPattern": "NIC.%"},
          { "MetricId": "TxErrorPktSingleCollision", "FQDDPattern": "NIC.%"},
          { "MetricId": "TxMutlicast", "FQDDPattern": "NIC.%"},
          { "MetricId": "TxPauseXOFFFrames", "FQDDPattern": "NIC.%"},
          { "MetricId": "TxPauseXONFrames", "FQDDPattern": "NIC.%"},
          { "MetricId": "TxUnicast", "FQDDPattern": "NIC.%"}
        ]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "NVMeSMARTData",        "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "FQDDPattern": "SMARTData:%PCIeExtender%" },

          { "MetricId": "AvailableSpare", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "AvailableSpareThreshold", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "CompositeTemparature", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "ControllerBusyTimeLower", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "ControllerBusyTimeUpper", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "CriticalWarning", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "DataUnitsReadLower", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "DataUnitsReadUpper", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "DataUnitsWrittenLower", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "DataUnitsWrittenUpper", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "HostReadCommandsLower", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "HostReadCommandsUpper", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "HostWriteCommandsLower", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "HostWriteCommandsUpper", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "MediaDataIntegrityErrorsLower", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "MediaDataIntegrityErrorsUpper", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "NumOfErrorInfoLogEntriesLower", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "NumOfErrorInfoLogEntriesUpper", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "PercentageUsed", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "PowerCyclesLower", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "PowerCyclesUpper", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "PowerOnHoursLower", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "PowerOnHoursUpper", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "UnsafeShutdownsLower", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "UnsafeShutdownsUpper", "FQDDPattern": "SMARTData:%" }
        ]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "PSUMetrics",           "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "MetricId": "FanSpeed", "FQDDPattern": "PSU.Slot.%" },
          { "MetricId": "Temperature", "FQDDPattern": "PSU.Slot.%" }
        ]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "PowerMetrics",         "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "FQDDPattern": "PowerMetrics" }
        ]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "PowerStatistics",      "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "FQDDPattern": "PowerStatistics" }
        ]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "Sensor",               "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "MetricId": "AmpsReading" },
          { "MetricId": "CPUUsagePctReading" },
          { "MetricId": "IOUsagePctReading" },
          { "MetricId": "MemoryUsagePctReading" },
          { "MetricId": "RPMReading" },
          { "MetricId": "SystemUsagePctReading" },
          { "MetricId": "TemperatureReading" },
          { "MetricId": "VoltageReading" },
          { "MetricId": "WattsReading" }
        ]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "GPUMetrics",           "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
              { "MetricId": "BoardPowerSupplyStatus" },
              { "MetricId": "BoardTemperature" },
              { "MetricId": "GPUHealth" },
              { "MetricId": "GPUStatus" },
              { "MetricId": "MemoryTemperature" },
              { "MetricId": "PowerBrakeState" },
              { "MetricId": "PowerConsumption" },
              { "MetricId": "PowerSupplyStatus" },
              { "MetricId": "PrimaryTemperature" },
              { "MetricId": "SecondaryTemperature" },
              { "MetricId": "ThermalAlertState" }
        ]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "AggregationMetrics",   "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "MetricId": "SystemAvgInletTempHour" },
          { "MetricId": "SystemMaxInletTempHour" },
          { "MetricId": "SystemMaxPowerConsumption" }
         ]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "CPUMemMetrics",        "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "MetricId": "CPUC0ResidencyHigh", "FQDDPattern": "CPU.Socket.%" },
          { "MetricId": "CPUC0ResidencyLow", "FQDDPattern": "CPU.Socket.%" },
          { "MetricId": "CUPSIIOBandwidthDMI", "FQDDPattern": "CPU.Socket.%" },
          { "MetricId": "CUPSIIOBandwidthPort0", "FQDDPattern": "CPU.Socket.%" },
          { "MetricId": "CUPSIIOBandwidthPort1", "FQDDPattern": "CPU.Socket.%" },
          { "MetricId": "CUPSIIOBandwidthPort2", "FQDDPattern": "CPU.Socket.%" },
          { "MetricId": "CUPSIIOBandwidthPort3", "FQDDPattern": "CPU.Socket.%" },
          { "MetricId": "NonC0ResidencyHigh", "FQDDPattern": "CPU.Socket.%" },
          { "MetricId": "NonC0ResidencyLow", "FQDDPattern": "CPU.Socket.%" }
         ]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "CUPS",
        "Enabled": true,
        "Type": "Periodic",
        "Period": 60,
        "Updates": "Overwrite",
        "SuppressDups": false,
        "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          {"FQDDPattern": "CUPS"},
          {"MetricID": "IOUsage", "FQDDPattern": "CUPS"},
          {"MetricID": "MemoryUsage", "FQDDPattern": "CUPS"},
          {"MetricID": "SystemUsage", "FQDDPattern": "CUPS"},
          {"MetricID": "CPUUsage", "FQDDPattern": "CUPS"}
        ]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "FanSensor",            "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [{"MetricID": "RPMReading", "FQDDPattern": "Fan.%"}]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "GPUStatistics",        "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "MetricId": "CumulativeDBECounterFB", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "CumulativeDBECounterGR", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "CumulativeSBECounterFB", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "CumulativeSBECounterGR", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "DBECounterFB", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "DBECounterFBL2Cache", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "DBECounterGRL1Cache", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "DBECounterGRRF", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "DBECounterGRTex", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "DBERetiredPages", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "SBECounterFB", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "SBECounterFBL2Cache", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "SBECounterGRL1Cache", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "SBECounterGRRF", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "SBECounterGRTex", "FQDDPattern": "Video.Slot.%" },
          { "MetricId": "SBERetiredPages", "FQDDPattern": "Video.Slot.%" }
        ]
      }

  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "ThermalSensor",        "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "MetricId": "TemperatureReading", "FQDDPattern": "iDRAC.Embedded.1#SystemBoardInletTemp" }
        ]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "StorageDiskSMARTData", "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "MetricId": "CRCErrorCount", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "CommandTimeout", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "CurrentPendingSectorCount", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "DriveTemperature", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "ECCERate", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "EraseFailCount", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "ExceptionModeStatus", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "MediaWriteCount", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "PercentDriveLifeRemaining", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "PowerCycleCount", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "PowerOnHours", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "ProgramFailCount", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "ReadErrorRate", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "ReallocatedBlockCount", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "UncorrectableErrorCount", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "UncorrectableLBACount", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "UnusedReservedBlockCount", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "UsedReservedBlockCount", "FQDDPattern": "SMARTData:%" },
          { "MetricId": "VolatileMemoryBackupSourceFailures", "FQDDPattern": "SMARTData:%" }
        ]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "StorageSensor",        "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "MetricId": "TemperatureReading", "FQDDPattern": "Disk.%" }
        ]
      }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "ThermalMetrics",       "Enabled": true, "Type": "Periodic", "Period": 60, "Updates": "Overwrite", "SuppressDups": false, "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "FQDDPattern": "Thermal" },
          { "MetricId": "ComputePower", "FQDDPattern": "Thermal" },
          { "MetricId": "ITUE", "FQDDPattern": "Thermal" },
          { "MetricId": "PSUEfficiency", "FQDDPattern": "Thermal" },
          { "MetricId": "PowerToCoolRatio", "FQDDPattern": "Thermal" },
          { "MetricId": "SysAirFlowEfficiency", "FQDDPattern": "Thermal" },
          { "MetricId": "SysAirflowPerFanPower", "FQDDPattern": "Thermal" },
          { "MetricId": "SysAirflowPerSysInputPower", "FQDDPattern": "Thermal" },
          { "MetricId": "SysAirflowUtilization", "FQDDPattern": "Thermal" },
          { "MetricId": "SysNetAirflow", "FQDDPattern": "Thermal" },
          { "MetricId": "SysRackTempDelta", "FQDDPattern": "Thermal" },
          { "MetricId": "TotalPSUHeatDissipation", "FQDDPattern": "Thermal" }
        ]
      }


  ###########################################################################3
  ## NEW reports
  ###########################################################################3
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "Thermal",
        "Enabled": true,
        "Type": "Periodic",
        "Period": 60,
        "Updates": "NewReport",
        "SuppressDups": true,
        "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          {"MetricID": "TemperatureReading"},
          {"MetricID": "RPMReading"}
         ]
       }
  - name: AddMetricReportDefinition
    data: |
      {
        "Name": "SMARTData",
        "Enabled": true,
        "Type": "Periodic",
        "Period": 60,
        "Updates": "Overwrite",
        "SuppressDups": false,
        "Actions": ["RedfishEvent", "LogToMetricReportsCollection"],
        "Metrics": [
          { "FQDDPattern": "SMARTData:%" }
        ]
      }

UDB-Metric-Import:
  CurrentCUPS:
    # TODO: UNDERLYING TABLE NEEDS HWM.
    Type: MetricColumns
    DBChange:
      SHM.db:
        TblsCurrentCUPS:
    ScanInterval: 0
    WaitInterval: 5
    Query: |
      SELECT
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,
        '/redfish/v1/FIXME' || FriendlyFQDD as Property,
        friendlyFQDD as Context,

        SystemCupsTimeStamp * 1000000000 as 'Timestamp-SystemUsage',
        SystemCupsCurrent as 'Metric-SystemUsage',

        MemoryCupsTimeStamp * 1000000000 as 'Timestamp-MemoryUsage',
        MemoryCupsCurrent as 'Metric-MemoryUsage',

        IoCupsTimestamp * 1000000000 as 'Timestamp-IOUsage',
        IoCupsCurrent as 'Metric-IOUsage',

        CpuCupsCollectionTime * 1000000000 as 'Timestamp-CPUUsage',
        CpuCupsCurrent as 'Metric-CPUUsage'
      FROM TblsCurrentCUPS

  PowerStatistics:
    # TODO: UNDERLYING TABLE NEEDS HWM.
    Type: MetricColumns
    DBChange:
      SHM.db:
        TblsPowerStatistics:
    ScanInterval: 0
    WaitInterval: 5
    Query: |
      SELECT
        cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        friendlyFQDD as Context,
        '/redfish/v1/FIXME' || FriendlyFQDD as Property,
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,

        LastWeekMinPowerTime as 'Metric-LastWeekMinPowerTime',
        LastWeekMinPower as 'Metric-LastWeekMinPower',
        LastWeekMaxPowerTime as 'Metric-LastWeekMaxPowerTime',
        LastWeekMaxPower as 'Metric-LastWeekMaxPower',
        LastWeekAvgPower as 'Metric-LastWeekAvgPower',
        LastMinuteMinPowerTime as 'Metric-LastMinuteMinPowerTime',
        LastMinuteMinPower as 'Metric-LastMinuteMinPower',
        LastMinuteMaxPowerTime as 'Metric-LastMinuteMaxPowerTime',
        LastMinuteMaxPower as 'Metric-LastMinuteMaxPower',
        LastMinuteAvgPower as 'Metric-LastMinuteAvgPower',
        LastHourMinPowerTime as 'Metric-LastHourMinPowerTime',
        LastHourMinPower as 'Metric-LastHourMinPower',
        LastHourMaxPowerTime as 'Metric-LastHourMaxPowerTime',
        LastHourMaxPower as 'Metric-LastHourMaxPower',
        LastHourAvgPower as 'Metric-LastHourAvgPower',
        LastDayMinPowerTime as 'Metric-LastDayMinPowerTime',
        LastDayMinPower as 'Metric-LastDayMinPower',
        LastDayMaxPowerTime as 'Metric-LastDayMaxPowerTime',
        LastDayMaxPower as 'Metric-LastDayMaxPower',
        LastDayAvgPower as 'Metric-LastDayAvgPower'
      FROM TblsPowerStatistics
      WHERE Timestamp > :HWM

  PowerMetrics:
    # TODO: UNDERLYING TABLE NEEDS HWM.
    Type: MetricColumns
    DBChange:
      SHM.db:
        TblsPowerMetrics:
    ScanInterval: 0
    WaitInterval: 5
    Query: |
      SELECT
        cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        friendlyFQDD as Context,
        '/redfish/v1/FIXME' || FriendlyFQDD as Property,
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,

        TotalStoragePower as 'Metric-TotalStoragePower',
        TotalPciePower as 'Metric-TotalPciePower',
        TotalMemoryPower as 'Metric-TotalMemoryPower',
        TotalFanPower as 'Metric-TotalFanPower',
        TotalCPUPower as 'Metric-TotalCPUPower',
        SystemPwrConsumption as 'Metric-SystemPowerConsumption',
        SystemHeadRoomInstantaneous as 'Metric-SystemHeadRoomInstantaneous',

        CurrentSystemOutputTimeStamp * 1000000000 as 'Timestamp-SystemOutputPower',
        CurrentSystemOutputPower as 'Metric-SystemOutputPower',

        CurrentSystemInputPowerTimeStamp * 1000000000 as 'Timestamp-SystemInputPower',
        CurrentSystemInputPower as 'Metric-SystemInputPower'
      FROM TblsPowerMetrics
      WHERE Timestamp > :HWM

  ThermalMetrics:
    # TODO: UNDERLYING TABLE NEEDS HWM.
    Type: MetricColumns
    DBChange:
      SHM.db:
        TblsThermalMetrics:
    ScanInterval: 0
    WaitInterval: 5
    Query: |
      SELECT
        cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        friendlyFQDD as Context,
        '/redfish/v1/FIXME' || FriendlyFQDD as Property,
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,

        TotalPSUHeatDissipation as 'Metric-TotalPSUHeatDissipation',
        SysRackTempDelta as 'Metric-SysRackTempDelta',
        SysNetAirflow as 'Metric-SysNetAirflow',
        SysAirflowUtilization as 'Metric-SysAirflowUtilization',
        SysAirflowPerSysInputPower as 'Metric-SysAirflowPerSysInputPower',
        SysAirflowPerFanPower as 'Metric-SysAirflowPerFanPower',
        SysAirFlowEfficiency as 'Metric-SysAirFlowEfficiency',
        PowerToCoolRatio as 'Metric-PowerToCoolRatio',
        PSUEfficiency as 'Metric-PSUEfficiency',
        ITUE as 'Metric-ITUE',
        ComputePower as 'Metric-ComputePower'
      FROM TblsThermalMetrics
      WHERE Timestamp > :HWM

  CPUMem:
    # TODO: UNDERLYING TABLE NEEDS HWM.
    Type: MetricColumns
    DBChange:
      SHM.db:
        TblsCpuMemMetrics:
    ScanInterval: 0
    WaitInterval: 5
    Query: |
      SELECT
        cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        friendlyFQDD as Context,
        '/redfish/v1/FIXME' || FriendlyFQDD as Property,
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,

        CpuMemoryMetrics_DOT_NonC0ResidencyLow_DOT_value as 'Metric-NonC0ResidencyLow',
        CpuMemoryMetrics_DOT_NonC0ResidencyHigh_DOT_value as 'Metric-NonC0ResidencyHigh',
        CpuMemoryMetrics_DOT_CUPSIIOBandwidthPort3_DOT_value as 'Metric-CUPSIIOBandwidthPort3',
        CpuMemoryMetrics_DOT_CUPSIIOBandwidthPort2_DOT_value as 'Metric-CUPSIIOBandwidthPort2',
        CpuMemoryMetrics_DOT_CUPSIIOBandwidthPort1_DOT_value as 'Metric-CUPSIIOBandwidthPort1',
        CpuMemoryMetrics_DOT_CUPSIIOBandwidthPort0_DOT_value as 'Metric-CUPSIIOBandwidthPort0',
        CpuMemoryMetrics_DOT_CUPSIIOBandwidthDMI_DOT_value as 'Metric-CUPSIIOBandwidthDMI',
        CpuMemoryMetrics_DOT_CPUC0ResidencyLow_DOT_value as 'Metric-CPUC0ResidencyLow',
        CpuMemoryMetrics_DOT_CPUC0ResidencyHigh_DOT_value as 'Metric-CPUC0ResidencyHigh'
      FROM TblsCpuMemMetrics
      WHERE Timestamp > :HWM

  PSU-Sensor:
    # TODO: UNDERLYING TABLE NEEDS HWM.
    Type: MetricColumns
    DBChange:
      SHM.db:
        TblsPSUMetrics:
    ScanInterval: 0
    WaitInterval: 5
    Query: |
      SELECT
        cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        friendlyFQDD as Context,
        '/redfish/v1/FIXME' || FriendlyFQDD as Property,
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,

        Temperature as 'Metric-TemperatureReading',
        FanSpeed as 'Metric-RPMReading'
      FROM TblsPSUMetrics
      WHERE Timestamp > :HWM

  Storage-Sensor:
    # TODO: UNDERLYING TABLE NEEDS HWM.
    Type: MetricColumns
    DBChange:
      SHM.db:
        TblsStorageSensor:
    ScanInterval: 0
    WaitInterval: 5
    Query: |
      SELECT
        cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        friendlyFQDD as Context,
        '/redfish/v1/FIXME' || FriendlyFQDD as Property,
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,

        CurrentReading as 'Metric-TemperatureReading'
      FROM TblsStorageSensor
      WHERE Timestamp > :HWM

  Memory-Sensor:
    # TODO: UNDERLYING TABLE NEEDS HWM.
    Type: MetricColumns
    DBChange:
      SHM.db:
        TblsMemorySensor:
    ScanInterval: 0
    WaitInterval: 5
    Query: |
      SELECT
        cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        friendlyFQDD as Context,
        '/redfish/v1/FIXME' || FriendlyFQDD as Property,
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,

        CurrentReading as 'Metric-TemperatureReading'
      FROM TblsMemorySensor
      WHERE Timestamp > :HWM

  FPGA-Sensor:
    # TODO: UNDERLYING TABLE NEEDS HWM.
    Type: MetricColumns
    DBChange:
      SHM.db:
        TblsFPGASensor:
    ScanInterval: 0
    WaitInterval: 5
    Query: |
      SELECT
        cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        friendlyFQDD as Context,
        '/redfish/v1/FIXME' || FriendlyFQDD as Property,
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,

        CurrentReading as 'Metric-TemperatureReading'
      FROM TblsFPGASensor
      WHERE Timestamp > :HWM

  Aggregation-Metrics:
    # TODO: UNDERLYING TABLE NEEDS HWM.
    Type: MetricColumns
    DBChange:
      SHM.db:
        TblsAggregationMetrics:
    ScanInterval: 0
    WaitInterval: 5
    Query: |
      SELECT
        -- only artificial available for now
        cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        FriendlyFQDD as Context,
        '/redfish/v1/FIXME' || FQDD as Property,
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,

        SystemMaxPowerConsumption as 'Metric-SystemMaxPowerConsumption',
        SystemMaxInletTempHour as 'Metric-SystemMaxInletTempHour',
        SystemAvgInletTempHour as 'Metric-SystemAvgInletTempHour'
      FROM TblsAggregationMetrics
      WHERE Timestamp > :HWM

  SMART-NVME:
    Type: MetricColumns
    DBChange:
      DMLiveObjectDatabase.db:
        TblRAID_PDSmartData_NVMe:
    ScanInterval: 600
    WaitInterval: 5
    Query: |
      SELECT
        -- We can artificially generate 'now' timestamps for each record, or use SingleRecordEtag
        -- also, lastUpdatedDateTime and SingleRecordEtag both are there. Which to use? use singlerecordetag for now...
        -- cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        SingleRecordEtag * 1000000000 as Timestamp,
        FQDD as Context,
         '/redfish/v1/FIXME/' || FQDD as Property,
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,

        smartData_DOT_percentageUsed as 'Metric-PercentageUsed',
        smartData_DOT_criticalWarning as 'Metric-CriticalWarning',
        smartData_DOT_compositeTemparature as 'Metric-CompositeTemperature',
        smartData_DOT_compositeTemparature as 'Metric-TemperatureReading',                  -- Add standard TemperatureReading metric
        smartData_DOT_availableSpareThreshold as 'Metric-AvailableSpareThreshold',
        smartData_DOT_availableSpare as 'Metric-AvailableSpare',
        smartData_DOT_UnsafeShutdowns_DOT_Upper as 'Metric-UnsafeShutdownsUpper',
        smartData_DOT_UnsafeShutdowns_DOT_Lower as 'Metric-UnsafeShutdownsLower',
        smartData_DOT_PowerOnHours_DOT_Upper as 'Metric-PowerOnHoursUpper',
        smartData_DOT_PowerOnHours_DOT_Lower as 'Metric-PowerOnHoursLower',
        smartData_DOT_PowerCycles_DOT_Upper as 'Metric-PowerCyclesUpper',
        smartData_DOT_PowerCycles_DOT_Lower as 'Metric-PowerCyclesLower',
        smartData_DOT_NumOfErrorInfoLogEntries_DOT_Upper as 'Metric-NumOfErrorInfoLogEntriesUpper',
        smartData_DOT_NumOfErrorInfoLogEntries_DOT_Lower as 'Metric-NumOfErrorInfoLogEntriesLower',
        smartData_DOT_MediaAndDataIntegrityErrs_DOT_Upper as 'Metric-MediaDataIntegrityErrorsUpper',
        smartData_DOT_MediaAndDataIntegrityErrs_DOT_Lower as 'Metric-MediaDataIntegrityErrorsLower',
        smartData_DOT_HostWriteCmds_DOT_Upper as 'Metric-HostWriteCommandsUpper',
        smartData_DOT_HostWriteCmds_DOT_Lower as 'Metric-HostWriteCommandsLower',
        smartData_DOT_HostReadCmds_DOT_Upper as 'Metric-HostReadCommandsUpper',
        smartData_DOT_HostReadCmds_DOT_Lower as 'Metric-HostReadCommandsLower',
        smartData_DOT_DataUnitsWritten_DOT_Upper as 'Metric-DataUnitsWrittenUpper',
        smartData_DOT_DataUnitsWritten_DOT_Lower as 'Metric-DataUnitsWrittenLower',
        smartData_DOT_DataUnitsRead_DOT_Upper as 'Metric-DataUnitsReadUpper',
        smartData_DOT_DataUnitsRead_DOT_Lower as 'Metric-DataUnitsReadLower',
        smartData_DOT_ControllerBusyTime_DOT_Upper as 'Metric-ControllerBusyTimeUpper',
        smartData_DOT_ControllerBusyTime_DOT_Lower as 'Metric-ControllerBusyTimeLower'
      FROM TblRAID_PDSmartData_NVMe
      WHERE Timestamp > :HWM

  SMART-SAS:
    Type: MetricColumns
    ScanInterval: 600
    WaitInterval: 5
    DBChange:
      DMLiveObjectDatabase.db:
        TblRAID_PDSmartData_SAS_SATA:
    Query: |
      SELECT
        SingleRecordEtag * 1000000000 as Timestamp,
        FQDD as Context,
         '/redfish/v1/FIXME/' || FQDD as Property,
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,

        smartData_DOT_volatileMemoryBackupSourceFailures as 'Metric-VolatileMemoryBackupSourceFailures',
        smartData_DOT_usedReservedBlockCount as 'Metric-UsedReservedBlockCount',
        smartData_DOT_unusedReservedBlockCount as 'Metric-UnusedReservedBlockCount',
        smartData_DOT_uncorrectableLBACount as 'Metric-UncorrectableLBACount',
        smartData_DOT_uncorrectableErrorCount as 'Metric-UncorrectableErrorCount',
        smartData_DOT_reallocatedBlockCount as 'Metric-ReallocatedBlockCount',
        smartData_DOT_readErrorDate as 'Metric-ReadErrorRate',
        smartData_DOT_programFailCount as 'Metric-ProgramFailCount',
        smartData_DOT_powerOnHours as 'Metric-PowerOnHours',
        smartData_DOT_powerCycleCount as 'Metric-PowerCycleCount',
        smartData_DOT_percentDriveLifeRemaining as 'Metric-PercentDriveLifeRemaining',
        smartData_DOT_mediaWriteCount as 'Metric-MediaWriteCount',
        smartData_DOT_exceptionModeStatus as 'Metric-ExceptionModeStatus',
        smartData_DOT_eraseFailCount as 'Metric-EraseFailCount',
        smartData_DOT_driveTemperature as 'Metric-DriveTemperature',
        smartData_DOT_driveTemperature as 'Metric-TemperatureReading',                        -- Add temperature reading standard metric
        smartData_DOT_currentPendingSectorCount as 'Metric-CurrentPendingSectorCount',
        smartData_DOT_commandTimeout as 'Metric-CommandTimeout',
        smartData_DOT_ECCERate as 'Metric-ECCERate',
        smartData_DOT_CRCErrorCount as 'Metric-CRCErrorCount'
      FROM TblRAID_PDSmartData_SAS_SATA
      WHERE Timestamp > :HWM

  GPU-Statistics:
    Type: MetricColumns
    ScanInterval: 10
    WaitInterval: 5
    DBChange:
      DMLiveObjectDatabase.db:
        TblGPUStatisticsObj:
    Query: |
      SELECT
        -- We can artificially generate 'now' timestamps for each record, or use SingleRecordEtag
        -- cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        SingleRecordEtag * 1000000000 as Timestamp,
        FQDD as Context,
         '/redfish/v1/FIXME/' || FQDD as Property,
        FQDD as FQDD,

        SBERetiredPages as 'Metric-SBERetiredPages',
        SBECounterGRTex as 'Metric-SBECounterGRTex',
        SBECounterGRRF as 'Metric-SBECounterGRRF',
        SBECounterGRL1CacheorSHM as 'Metric-SBECounterGRL1CacheorSHM',
        SBECounterFBL2Cache as 'Metric-SBECounterFBL2Cache',
        SBECounterFB as 'Metric-SBECounterFB',
        DBERetiredPages as 'Metric-DBERetiredPages',
        DBECounterGRTex as 'Metric-DBECounterGRTex',
        DBECounterGRTex as 'Metric-DBECounterGRTex',
        DBECounterGRRF as 'Metric-DBECounterGRRF',
        DBECounterGRL1CacheorSHM as 'Metric-DBECounterGRL1CacheorSHM',
        DBECounterFBL2Cache as 'Metric-DBECounterFBL2Cache',
        DBECounterFB as 'Metric-DBECounterFB',
        CumulativeSBECounterGR as 'Metric-CumulativeSBECounterGR',
        CumulativeDBECounterGR as 'Metric-CumulativeDBECounterGR',
        CumulativeDBECounterFB as 'Metric-CumulativeDBECounterFB'
      FROM TblGPUStatisticsObj
      WHERE Timestamp > :HWM

  GPU-Health:
    Type: MetricColumns
    ScanInterval: 10
    WaitInterval: 5
    DBChange:
      DMLiveObjectDatabase.db:
        TblGPUHealthObj:
    Query: |
      SELECT
        -- We can artificially generate 'now' timestamps for each record, or use SingleRecordEtag
        -- cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        SingleRecordEtag * 1000000000 as Timestamp,
        FQDD as Context,
         '/redfish/v1/FIXME/' || FQDD as Property,
        FQDD as FQDD,

        ThermalAlertState as 'Metric-ThermalAlertState',
        SecondaryGpuTemp as 'Metric-SecondaryGpuTemp',
        PrimaryGpuTemp as 'Metric-PrimaryGpuTemp',
        PowerSupplyStatus as 'Metric-PowerSupplyStatus',
        PowerConsumption as 'Metric-PowerConsumption',
        PowerBrakeState as 'Metric-PowerBrakeState',
        MemoryTemp as 'Metric-MemoryTemp',
        GPUStatus as 'Metric-GPUStatus',
        GPUHealth as 'Metric-GPUHealth',
        BoardTemp as 'Metric-BoardTemp',
        BoardPowerSupplyStatus as 'Metric-BoardPowerSupplyStatus'
      FROM TblGPUHealthObj
      WHERE Timestamp > :HWM

  NICPortStats:
    Type: MetricColumns
    # TODO: UNDERLYING TABLE NEEDS HWM.
    ScanInterval: 0
    WaitInterval: 5
    # CIMVIEW_DCIM_NICStatistics is a VIEW, so do dbchange on the underlying table
    DBChange:
      DMLiveObjectDatabase.db:
        TblNic_Port_Stats_Obj:
        TblNic_Partition_Stats_Obj:
        TblSfp_Sensor_Obj:
        TblNic_RDMA_Stats_Obj:
    Query: |
      SELECT
        -- We can artificially generate 'now' timestamps for each record, or use StatisticTime
        -- cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        StatisticTime * 1000000000 as Timestamp,
        FQDD as Context,
         '/redfish/v1/FIXME/' || FQDD as Property,
        FQDD as FQDD,

        TxUnicast as 'Metric-TxUnicast',
        TxPauseXONFrames as 'Metric-TxPauseXONFrames',
        TxPauseXOFFFrames as 'Metric-TxPauseXOFFFrames',
        TxMutlicast as 'Metric-TxMutlicast',
        TxErrorPktSingleCollision as 'Metric-TxErrorPktSingleCollision',
        TxErrorPktMultipleCollision as 'Metric-TxErrorPktMultipleCollision',
        TxErrorPktLateCollision as 'Metric-TxErrorPktLateCollision',
        TxErrorPktExcessiveCollision as 'Metric-TxErrorPktExcessiveCollision',
        TxBytes as 'Metric-TxBytes',
        TxBroadcast as 'Metric-TxBroadcast',
        RxUnicast as 'Metric-RxUnicast',
        RxRuntPkt as 'Metric-RxRuntPkt',
        RxPauseXONFrames as 'Metric-RxPauseXONFrames',
        RxPauseXOFFFrames as 'Metric-RxPauseXOFFFrames',
        RxMutlicast as 'Metric-RxMutlicast',
        RxJabberPkt as 'Metric-RxJabberPkt',
        RxFalseCarrierDetection as 'Metric-RxFalseCarrierDetection',
        RxErrorPktFCSErrors as 'Metric-RxErrorPktFCSErrors',
        RxErrorPktAlignmentErrors as 'Metric-RxErrorPktAlignmentErrors',
        RxBytes as 'Metric-RxBytes',
        RxBroadcast as 'Metric-RxBroadcast',
        RDMATxTotalWritePkts as 'Metric-RDMATxTotalWritePkts',
        RDMATxTotalSendPkts as 'Metric-RDMATxTotalSendPkts',
        RDMATxTotalReadReqPkts as 'Metric-RDMATxTotalReadReqPkts',
        RDMATxTotalPackets as 'Metric-RDMATxTotalPackets',
        RDMATxTotalBytes as 'Metric-RDMATxTotalBytes',
        RDMATotalProtocolErrors as 'Metric-RDMATotalProtocolErrors',
        RDMATotalProtectionErrors as 'Metric-RDMATotalProtectionErrors',
        RDMARxTotalPackets as 'Metric-RDMARxTotalPackets',
        RDMARxTotalBytes as 'Metric-RDMARxTotalBytes',
        PartitionOSDriverState as 'Metric-PartitionOSDriverState',
        PartitionLinkStatus as 'Metric-PartitionLinkStatus',
        OSDriverState as 'Metric-OSDriverState',
        LinkStatus as 'Metric-LinkStatus',
        LanUnicastPktTXCount as 'Metric-LanUnicastPktTXCount',
        LanUnicastPktRXCount as 'Metric-LanUnicastPktRXCount',
        LanFCSRxErrors as 'Metric-LanFCSRxErrors',
        FCOERxPktDroppedCount as 'Metric-FCOERxPktDroppedCount',
        FCOEPktTxCount as 'Metric-FCOEPktTxCount',
        FCOEPktRxCount as 'Metric-FCOEPktRxCount',
        FCOELinkFailures as 'Metric-FCOELinkFailures',
        FCCRCErrorCount as 'Metric-FCCRCErrorCount',
        DiscardedPkts as 'Metric-DiscardedPkts',

        -- These dont seem to be populated in the embedded nics that I see. Possibly this is there for add-in cards
        Temperature as 'Metric-TemperatureReading',
        VoltageValue as 'Metric-VoltageReading'

        -- These are somewhat interesting in the underlying table. Need to see if we can output these as well
        --'RXInputPower'
        --'RXInputPowerStatus'     ,
        --'TXBiasCurrent'
        --'TXBiasCurrentStatus'    ,
        --'TXOutputPower'
        --'TXOutputPowerStatus'

      FROM CIMVIEW_DCIM_NICStatistics
      WHERE Timestamp > :HWM

  HIITempSensors:
    Type: MetricColumns
    ScanInterval: 10
    WaitInterval: 5
    DBChange:
      DMLiveObjectDatabase.db:
        TblHIISensorInfo_obj:
    Query: |
      SELECT
        -- We can artificially generate 'now' timestamps for each record, or use SingleRecordEtag
        --cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        SingleRecordEtag * 1000000000 as Timestamp,
        FriendlyFQDD as Context,
        '/redfish/v1/FIXME/' || FQDD as Property,
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,

        currentTemp as 'Metric-TemperatureReading'
      FROM TblHIISensorInfo_obj
      WHERE Timestamp > :HWM

  Fan:
    Type: MetricColumns
    ScanInterval: 10
    WaitInterval: 5
    DBChange:
      DMLiveObjectDatabase.db:
        TblFanExtObj:
    Query: |
      SELECT
        -- We can artificially generate 'now' timestamps for each record, or use SingleRecordEtag
        -- cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        SingleRecordEtag * 1000000000 as Timestamp,
        FriendlyFQDD as Context,
        '/redfish/v1/FIXME/' || FQDD as Property,
        friendlyFQDD as FriendlyFQDD,
        FQDD as FQDD,

        VariableSpeed as 'Metric-RPMReading'
      from TblFanExtObj
      WHERE Timestamp > :HWM

  Sensor:
    Type: DirectMetric
    # TODO: UNDERLYING TABLE NEEDS HWM.
    # TODO: Underlying view table missing FQDD, need to add
    ScanInterval: 0
    WaitInterval: 5
    # CIMVIEW_DCIM_NumericSensor is a view, do db change notifications on underlying tables
    DBChange:
      DMLiveObjectDatabase.db:
        TblProbeObj:
        ActiveOIDMapping:
    Query: |
      SELECT
        cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        case
          when SensorType = 1 then
          case
            when DeviceID = 'iDRAC.Embedded.1#SystemBoardCPUUsage' then 'CPUUsage'
            when DeviceID = 'iDRAC.Embedded.1#SystemBoardSYSUsage' then 'SystemUsage'
            when DeviceID = 'iDRAC.Embedded.1#SystemBoardMEMUsage' then 'MemoryUsage'
            when DeviceID = 'iDRAC.Embedded.1#SystemBoardIOUsage'  then 'IOUsage'
          end
          when SensorType = 2 then 'TemperatureReading'
          when SensorType = 3 then 'VoltageReading'
          when SensorType = 5 then 'RPMReading'
          else "InvalidMetric-" || SensorType
        end as Name,
        CurrentReading as Value,
        printf('/redfish/v1/Dell/Systems/System.Embedded.1/DellNumericSensor/%s', replace(replace(DeviceID, '|', '_0x7c_') , '#', '_0x23_')) as Property,
        ElementName as Context,
        DeviceID as FQDD,
        ElementName as FriendlyFQDD
      FROM CIMVIEW_DCIM_NumericSensor
      WHERE Timestamp > :HWM

  PSSensor:
    # TODO: UNDERLYING TABLE NEEDS HWM.
    Type: DirectMetric
    # CIMVIEW_DCIM_PSNumericSensor is view, do db change on underlying tables
    DBChange:
      DMLiveObjectDatabase.db:
        TblProbeObj:
        ActiveOIDMapping:
    ScanInterval: 0
    WaitInterval: 5
    Query: |
      SELECT
        cast( (julianday('now') - 2440587.5)*86400.0 * 1000000000 as integer) as Timestamp,
        case SensorType
          when 13 then
          case
            when DeviceID = 'iDRAC.Embedded.1#SystemBoardPwrConsumption' then 'SystemBoardPowerConsumption'
            when Description = "Power Supply Power Consumption" then "WattsReading"
            else 'InvalidMetric-' || DeviceID
          end
          else "InvalidMetric-" || SensorType
        end as Name,
        CurrentReading as Value,
        printf('/redfish/v1/Dell/Systems/System.Embedded.1/DellPSNumericSensor/%s', replace(replace(DeviceID, '|', '_0x7c_') , '#', '_0x23_')) as Property,
        ElementName as Context,
        DeviceID as FQDD,
        ElementName as FriendlyFQDD
      FROM CIMVIEW_DCIM_PSNumericSensor
      WHERE Timestamp > :HWM

createdb:
  # This bumps memory usage by 10MB for some unknown reason
  #  - "PRAGMA cache_size=4096;"
  # Need to try this one out:
  #  - "PRAGMA cache_size=0;"
  - "PRAGMA journal_size_limit=4096;"
  - "PRAGMA foreign_keys = ON;"
  - "PRAGMA journal_mode = WAL;"
  - "PRAGMA synchronous = OFF;"
  - "PRAGMA busy_timeout = 1000;"
  - |
      CREATE TABLE IF NOT EXISTS MetricReportDefinition
      (
        ID           INTEGER PRIMARY KEY NOT NULL,
        Name         TEXT UNIQUE NOT NULL, -- Name of the metric report defintion. This is what shows up in the collection
        ShortDesc    TEXT,
        LongDesc     TEXT,
        Enabled      BOOLEAN,
        AppendLimit  INTEGER,
        Type         TEXT,                 -- type of report: 'Periodic', 'OnChange', 'OnRequest'
        SuppressDups BOOLEAN,
        Actions      TEXT,                 -- json array of options: 'LogToMetricReportsCollection', 'RedfishEvent'
        Updates      TEXT,                 -- 'AppendStopsWhenFull', 'AppendWrapsWhenFull', 'NewReport', 'Overwrite'
        Period       INTEGER,
        Hidden       INTEGER               -- Not displayed to the user, only for internal use
      )

  - |
      -- These always exist
      -- They are created when the report is created
      -- multiple reports can link to the same MetricMeta (many to many relationship)
      CREATE TABLE IF NOT EXISTS MetricMeta
      (
        ID                 INTEGER UNIQUE PRIMARY KEY NOT NULL,
        Name               TEXT,
        SuppressDups       BOOLEAN NOT NULL DEFAULT true,
        FQDDPattern        TEXT,   -- Dell OEM extension to sort based on FQDD patterns
        PropertyPattern    TEXT,   -- /redfish/v1/some/uri/{with}/{wildcards}#Property
        Wildcards          TEXT,   --{'wildcard': ['array','of', 'possible', 'replacements'], 'with': ['another', 'list', 'of', 'replacements']}
        CollectionFunction TEXT not null,   -- 'sum', 'avg', 'min', 'max'
        CollectionDuration INTEGER,

        -- indexes and constraints
        unique (Name, SuppressDups, FQDDPattern, PropertyPattern, Wildcards, CollectionFunction, CollectionDuration)
      )

  - |
      CREATE TABLE IF NOT EXISTS ReportDefinitionToMetricMeta
        (
          ReportDefinitionID   integer not null,
          MetricMetaID   integer not null,

          -- indexes and constraints
          primary key (ReportDefinitionID, MetricMetaID)
          foreign key (ReportDefinitionID)
            references MetricReportDefinition (ID)
              on delete cascade
          foreign key (MetricMetaID)
            references MetricMeta (ID)
              on delete cascade
        )
  - "CREATE INDEX IF NOT EXISTS report_definition_2_metric_meta_metric_meta_id_idx ON ReportDefinitionToMetricMeta(MetricMetaID)"
  - |
      -- Created on demand as metrics come in
      -- Algorithm:
      -- On new MetricValueEvent:
      --   foreach select * from MetricMeta where mm.Name == event.Name
      --      if match_property(mm.property, event.Property)
      --        select ID from MetricInstance join metricmeta on metricinstance.MetaID == metricmeta.ID
      --        or insert into MetricInstance (based on MetricMeta), Get inserted ID
      --         then:
      --           insert into MetricValue (ID, TS, Value)
      CREATE TABLE IF NOT EXISTS MetricInstance
      (
        ID                INTEGER NOT NULL PRIMARY KEY,
        MetaID            INTEGER NOT NULL,
        Name              TEXT    NOT NULL, -- actual metric name
        FQDD              TEXT    NOT NULL,
        Property          TEXT    NOT NULL, -- URI#Property
        Context           TEXT    NOT NULL, -- usually FQDD
        Function          TEXT    NOT NULL,
        Label             TEXT    NOT NULL, -- 'friendly FQDD' + 'metric name' + 'collectionfn'
        CollectionScratch TEXT    NOT NULL, -- Scratch space used by calculation functions
        FlushTime         INTEGER,          -- Time at which any aggregated data should be flushed
        LastTS            INTEGER NOT NULL, -- Used to quickly suppress dups for this instance
        LastValue         TEXT    NOT NULL, -- Used to quickly suppress dups for this instance

        -- indexes and constraints
        unique (MetaID, Name, FQDD, Property, Context, Function)
        FOREIGN KEY (MetaID)
          REFERENCES MetricMeta (ID) ON DELETE CASCADE
      )

  - |
      CREATE TABLE IF NOT EXISTS MetricValueInt
      (
        InstanceID INTEGER NOT NULL,
        Timestamp  INTEGER NOT NULL,
        Value      INTEGER NOT NULL,

        -- indexes and constraints
        PRIMARY KEY (InstanceID, Timestamp),
        FOREIGN KEY (InstanceID)
          REFERENCES MetricInstance (ID) ON DELETE CASCADE
      ) WITHOUT ROWID;

  - |
      CREATE TABLE IF NOT EXISTS MetricValueReal
      (
        InstanceID INTEGER NOT NULL,
        Timestamp  INTEGER NOT NULL,
        Value      REAL    NOT NULL,

        -- indexes and constraints
        PRIMARY KEY (InstanceID, Timestamp),
        FOREIGN KEY (InstanceID)
          REFERENCES MetricInstance (ID) ON DELETE CASCADE
      ) WITHOUT ROWID;

  - |
      CREATE TABLE IF NOT EXISTS MetricValueText
      (
        InstanceID INTEGER NOT NULL,
        Timestamp  INTEGER NOT NULL,
        Value      TEXT    NOT NULL,

        -- indexes and constraints
        PRIMARY KEY (InstanceID, Timestamp),
        FOREIGN KEY (InstanceID)
          REFERENCES MetricInstance (ID) ON DELETE CASCADE
      ) WITHOUT ROWID;

  - |
      CREATE View IF NOT EXISTS MetricValue as
        select InstanceID, Timestamp, Value from MetricValueText
        union all
        select InstanceID, Timestamp, Value from MetricValueInt
        union all
        select InstanceID, Timestamp, Value from MetricValueReal;

  - |
      CREATE INDEX IF NOT EXISTS metric_value_int_ts_xref_idx on MetricValueInt(Timestamp);
      CREATE INDEX IF NOT EXISTS metric_value_real_ts_xref_idx on MetricValueReal(Timestamp);
      CREATE INDEX IF NOT EXISTS metric_value_text_ts_xref_idx on MetricValueText(Timestamp);

  - |
      CREATE TABLE IF NOT EXISTS MetricReport
      (
        Name                TEXT PRIMARY KEY UNIQUE NOT NULL,
        ReportDefinitionID  INTEGER NOT NULL,
        Sequence             INTEGER NOT NULL,
        ReportTimestamp     INTEGER,  -- datetime

        -- cross reference to the start and end timestamps in the MetricValue table
        StartTimestamp   INTEGER,  -- datetime
        EndTimestamp      INTEGER,  -- datetime

        -- indexes and constraints
        FOREIGN KEY (ReportDefinitionID)
          REFERENCES MetricReportDefinition (ID) ON DELETE CASCADE
      );

      CREATE INDEX IF NOT EXISTS metric_report_xref_idx on MetricReport(ReportDefinitionID);

  - |
      -- this view is scalable: it will stream out without using extra memory
      -- IFF(!) you do NOT 'ORDER BY'
      DROP VIEW IF EXISTS MetricValueByReport;
      CREATE VIEW MetricValueByReport as
        select
            MV.InstanceID,
            MV.Timestamp,
            rd2mm.ReportDefinitionID as MRDID,
            json_object(
              'MetricId', MI.Name,
              'Timestamp', strftime('%Y-%m-%dT%H:%M:%f', MV.Timestamp/1000000000.0, 'unixepoch'),
              'MetricValue', MV.Value,
              'OEM', json_object(
                'Dell', json_object(
                  'Context', MI.Context,
                  'Label', MI.Label
                )
            )) as 'JSON'
          from MetricValue as MV
          inner join MetricInstance as MI on MV.InstanceID = MI.ID
          inner join MetricMeta as MM on MI.MetaID = MM.ID
          inner join ReportDefinitionToMetricMeta as rd2mm on MM.ID = rd2mm.MetricMetaID;

  - |
      -- DOES NOT SCALE:  This uses a temp table to spool the metric values. memory usage scales with # of records output.
      --                 BECAUSE OF THE 'ORDER BY' for the MetricValueByReport table!
      DROP VIEW IF EXISTS MetricReport_Stops_Redfish;
      CREATE VIEW MetricReport_Stops_Redfish AS
        select
          ('{' ||
              ' "@odata.type": "#MetricReport.v1_2_0.MetricReport",' ||
              ' "@odata.context": "/redfish/v1/$metadata#MetricReport.MetricReport",' ||
              ' "@odata.id": "/redfish/v1/TelemetryService/MetricReports/' || MR.Name || '",' ||
              ' "Id": "' || MR.Name || '",' ||
              ' "Name": "' || MR.Name || ' Metric Report",' ||
              ' "ReportSequence": ' || Sequence || ',' ||
              ' "Timestamp": ' || strftime('"%Y-%m-%dT%H:%M:%fZ"', MR.ReportTimestamp/1000000000.0, 'unixepoch') || ', ' ||
              ' "MetricReportDefinition": {"@odata.id": "/redfish/v1/TelemetryService/MetricReportDefinitions/' || MRD.Name || '"}, ' ||
                ifnull((
                  SELECT
                    ' "MetricValues":  [' ||  group_concat(a.JSON) || '], ' ||
                    ' "MetricValues@odata.count": ' ||  count(*)
                  FROM
                  (
                    select JSON
                    from MetricValueByReport as MVR
                    where MVR.MRDID=MR.ReportDefinitionID
                      and ( MVR.Timestamp > MR.StartTimestamp OR MR.StartTimestamp is NULL )
                      and ( MVR.Timestamp <= MR.EndTimestamp OR MR.EndTimestamp is NULL )
                      order by MVR.Timestamp ASC
                      limit 3000
                    ) AS a ), ' "MetricValues":  [], "MetricValues@odata.count": 0 ')
            || '}'
          ) as root,
          '/redfish/v1/TelemetryService/MetricReports/' || MR.Name as '@odata.id'
        from MetricReport as MR
        inner join MetricReportDefinition as MRD on MR.ReportDefinitionID = MRD.ID
        where MRD.Updates != "AppendWrapsWhenFull"

  - |
      -- DOES NOT SCALE:  This uses a temp table to spool the metric values. memory usage scales with # of records output.
      DROP VIEW IF EXISTS MetricReport_Wraps_Redfish;
      CREATE VIEW MetricReport_Wraps_Redfish as
      select
        ('{' ||
            ' "@odata.type": "#MetricReport.v1_2_0.MetricReport",' ||
            ' "@odata.context": "/redfish/v1/$metadata#MetricReport.MetricReport",' ||
            ' "@odata.id": "/redfish/v1/TelemetryService/MetricReports/' || MR.Name || '",' ||
            ' "Id": "' || MR.Name || '",' ||
            ' "Name": "' || MR.Name || ' Metric Report",' ||
            ' "ReportSequence": ' || Sequence || ',' ||
            ' "Timestamp": ' || strftime('"%Y-%m-%dT%H:%M:%fZ"', MR.ReportTimestamp/1000000000.0, 'unixepoch') || ', ' ||
            ' "MetricReportDefinition": {"@odata.id": "/redfish/v1/TelemetryService/MetricReportDefinitions/' || MRD.Name || '"}, ' ||
              ifnull((
                SELECT
                  ' "MetricValues":  [' ||  group_concat(a.JSON) || '], ' ||
                  ' "MetricValues@odata.count": ' ||  count(*)
                FROM
                (
                  select JSON
                  from MetricValueByReport as MVR
                  where MVR.MRDID=MR.ReportDefinitionID
                    and ( MVR.Timestamp > MR.StartTimestamp OR MR.StartTimestamp is NULL )
                    and ( MVR.Timestamp <= MR.EndTimestamp OR MR.EndTimestamp is NULL )
                    order by MVR.Timestamp DESC
                    limit 3000
                ) AS a ), '')
          || '}'
        ) as root,
        '/redfish/v1/TelemetryService/MetricReports/' || MR.Name as '@odata.id'
      from MetricReport as MR
      inner join MetricReportDefinition as MRD on MR.ReportDefinitionID = MRD.ID
      where MRD.Updates = 'AppendWrapsWhenFull'

  - |
      -- This is the table that creates a uniform table name to gather *any* metric report, regardless of type
      DROP VIEW IF EXISTS MetricReport_JSON;
      CREATE VIEW MetricReport_JSON as
        select root, [@odata.id] from MetricReport_Wraps_Redfish
          UNION ALL
        select root, [@odata.id] from MetricReport_Stops_Redfish

  - |
      DROP VIEW IF EXISTS MetricReportCollection_JSON;
      CREATE VIEW MetricReportCollection_JSON as
        select
          json_object(
            '@odata.context', '/redfish/v1/$metadata#MetricReportCollection.MetricReportCollection',
            '@odata.id', '/redfish/v1/TelemetryService/MetricReports',
            '@odata.type', '#MetricReportCollection.MetricReportCollection',
            'Name', 'MetricReports',
            'Members',
            (
            select
              json_group_array( json_object('@odata.id', [@odata.id]) )
            from MetricReport_JSON
            )
          ) as root,
          '/redfish/v1/TelemetryService/MetricReports' as [@odata.id]

  - |
      DROP VIEW IF EXISTS MetricReportDefinition_JSON;
      CREATE VIEW MetricReportDefinition_JSON as
        select
          (
          '{' ||
          ' "@odata.type": "#MetricReportDefinition.v1_2_0.MetricReportDefinition",' ||
          ' "@odata.context": "/redfish/v1/$metadata#MetricReportDefinition.MetricReportDefinition",' ||
          ' "@odata.id": "/redfish/v1/TelemetryService/MetricReportDefinitions/' || Name || '",' ||
          ' "Id": "' || name || '",' ||
          ' "Name": "' ||  ifnull(shortdesc, name || ' metric report definition') || '",' ||
          ' "Description": "' ||  ifnull(LongDesc, name || ' metric report definition') || '",' ||
            -- Hardcoded/fixed due to limitations in SQLITE query engine. LIMIT must be a constant
          ' "AppendLimit": 3000,' ||
          ' "MetricReportDefinitionEnabled": ' || case Enabled when 1 then json('true') else json('false') end || ',' ||
          ' "MetricReportDefinitionType": "' || Type || '",' ||
          ' "MetricReportDefinitionType@Redfish.AllowableValues": ' || json_array('Periodic', 'OnChange', 'OnRequest') || ', ' ||
          ' "MetricReportHeartbeatInterval": null,' ||
          ' "SuppressRepeatedMetricValue": ' || case SuppressDups when 1 then json('true') else json('false') end || ',' ||
          ' "ReportUpdates": "' || Updates || '", ' ||
          ' "ReportUpdates@Redfish.AllowableValues": ' || json_array('AppendStopsWhenFull', 'AppendWrapsWhenFull', 'NewReport', 'Overwrite') || ", " ||

          ' "ReportActions": ' || json(Actions) || ',' ||
          ' "ReportActions@odata.count": ' || json_array_length(json(Actions)) || ',' ||
          ' "ReportActions@Redfish.AllowableValues": ' || json_array('LogToMetricReportsCollection', 'RedfishEvent') || ',' ||
          case Type
          when 'Periodic' then
          ' "Schedule": ' || json_object(
              'RecurrenceInterval', 'PT' || (Period/(3600)) || 'H' || ((Period/60)%60) || 'M' || (Period%60) || 'S'
            ) || ','
          else ''
          end ||
          ' "MetricReport": ' || json((
                select
                  json_object( '@odata.id', '/redfish/v1/TelemetryService/MetricReports/' || Name )
                from MetricReport as MR
                where MR.ReportDefinitionID = MetricReportDefinition.ID
                order by MR.Sequence DESC
                LIMIT 1
                )) || ',' ||
          ifnull((
            SELECT
            ' "Metrics": ' ||  json('[' ||  group_concat(a.JSON) || ']') || ',' ||
            ' "Metrics@odata.count": ' ||  count(*)
            FROM
            (
              select
                (
                 '{' ||
                 ' "MetricID": "' || MM.Name || '"' ||

                 case MM.PropertyPattern
                 when '' then ''
                 else
                 -- TODO: this is wrong, as it should be an array
                 ', "MetricProperties": "' || MM.PropertyPattern ||'"'
                 end ||

                 case MM.CollectionFunction
                 when '' then ''
                 else
                  ', "CollectionFunction": "' || MM.CollectionFunction || '"' ||
                  ', "CollectionDuration": "' || MM.CollectionDuration || '"'
                 end ||

                 case MM.FQDDPattern
                 when '' then ''
                 else
                 ', "OEM": ' || json_object(
                    'Dell', json_object(
                      'FQDD', MM.FQDDPattern
                    )
                  )
                 end ||
                 '}'
                ) as JSON
              from MetricMeta as MM
              left join  ReportDefinitionToMetricMeta as rd2mm on rd2mm.MetricMetaID = MM.ID
              where rd2mm.ReportDefinitionID = MetricReportDefinition.ID
              ) AS a ), '"Metrics": [], "Metrics@odata.count": 0' ) ||
          '}'
          ) as root,
          '/redfish/v1/TelemetryService/MetricReportDefinitions/' || Name as [@odata.id]
        from MetricReportDefinition

  - |
      DROP VIEW IF EXISTS MetricReportDefinitionCollection_JSON;
      CREATE VIEW MetricReportDefinitionCollection_JSON as
        select
          json_object(
            "@odata.context", "/redfish/v1/$metadata#MetricReportDefinitionCollection.MetricReportDefinitionCollection",
            "@odata.id", "/redfish/v1/TelemetryService/MetricReportDefinitions",
            "@odata.type", "#MetricReportDefinitionCollection.MetricReportDefinitionCollection",
            "Name", "MetricReportDefinitions",
            'Members', (
              select
                json_group_array( json_object('@odata.id', [@odata.id]) )
              from MetricReportDefinition_JSON
            )
          ) as root,
          '/redfish/v1/TelemetryService/MetricReportDefinitions' as [@odata.id]

  - |
      DROP VIEW IF EXISTS TelemetryService_JSON;
      CREATE VIEW TelemetryService_JSON as
      select
        json_object(
          '@odata.context', '/redfish/v1/$metadata#TelemetryService.TelemetryService',
          '@odata.id', '/redfish/v1/TelemetryService',
          '@odata.type', '#TelemetryService.v1_1_1.TelemetryService',
          'Actions', json_object(
            '#TelemetryService.SubmitTestMetricReport', json_object(
              'target', '/redfish/v1/TelemetryService/Actions/TelemetryService.SubmitTestMetricReport'
            )
          ),
          'Id', 'TelemetryService',
          'Name', 'TelemetryService',
          'MetricDefinitions', json_object(
            '@odata.id', '/redfish/v1/TelemetryService/MetricDefinitions'
          ),
          'MetricReportDefinitions', json_object(
            '@odata.id', '/redfish/v1/TelemetryService/MetricReportDefinitions'
          ),
          'MetricReports', json_object(
            '@odata.id', '/redfish/v1/TelemetryService/MetricReports'
          ),
          'Triggers', json_object(
            '@odata.id', '/redfish/v1/TelemetryService/Triggers'
          )
        ) as root,
        '/redfish/v1/TelemetryService' as [@odata.id]

  - |
      -- This is the table that creates a uniform table name to gather *any* metric report, regardless of type
      DROP VIEW IF EXISTS JSON;
      CREATE VIEW JSON as
        select root, [@odata.id] from MetricReportDefinitionCollection_JSON
          UNION ALL
        select root, [@odata.id] from MetricReportDefinition_JSON
          UNION ALL
        select root, [@odata.id] from MetricReportCollection_JSON
          UNION ALL
        select root, [@odata.id] from MetricReport_JSON
          UNION ALL
        select root, [@odata.id] from TelemetryService_JSON

# Backwards compat stuff to get the fcgi_rfsql to work
  - |
      DROP VIEW IF EXISTS TblMetricReportItems;
      CREATE VIEW         TblMetricReportItems AS
        SELECT
          Name as ResourceType,
          '/redfish/v1/TelemetryService/MetricReports/' || Name as '@odata.id'
        FROM
          MetricReport;

  - |
      DROP VIEW IF EXISTS TblMetricReportDefinitionItems;
      CREATE VIEW         TblMetricReportDefinitionItems AS
        SELECT
          Name as ResourceType,
          '/redfish/v1/TelemetryService/MetricReportDefinitions/' || Name as '@odata.id'
        FROM
          MetricReportDefinitions;

  - |
      DROP VIEW IF EXISTS TblTelemetryAttributesRFEnable;
      CREATE VIEW         TblTelemetryAttributesRFEnable AS
        SELECT
          'Enabled' as CurrentValue,
          'iDRAC.Embedded.1#Redfish.1#Enable' as Key

  - |
      DROP VIEW IF EXISTS TblTelemetryAttributesTelemEnable;
      CREATE VIEW         TblTelemetryAttributesTelemEnable AS
        SELECT
          'Enabled' as CurrentValue,
          'iDRAC.Embedded.1#Telemetry.1#EnableTelemetry' as Key

  - |
      DROP VIEW IF EXISTS TblTelemetryAttributesREPORT;
      CREATE VIEW         TblTelemetryAttributesREPORT AS
        SELECT
          'Enabled' as CurrentValue,
          'iDRAC.Embedded.1#Telemetry' || Name || '.1#EnableTelemetry'  as Key
        FROM
          MetricReport

  - |
      DROP VIEW IF EXISTS TblTelemetryAttributes;
      CREATE VIEW         TblTelemetryAttributes AS
        SELECT * FROM TblTelemetryAttributesREPORT
        UNION ALL
        SELECT * FROM TblTelemetryAttributesRFEnable
        UNION ALL
        SELECT * FROM TblTelemetryAttributesTelemEnable

  - |
        DROP VIEW IF EXISTS AggregationMetricsMRView_json ; create view AggregationMetricsMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/AggregationMetrics';
        DROP VIEW IF EXISTS CPUMemMetricsMRView_json ; create view CPUMemMetricsMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/CPUMemMetrics';
        DROP VIEW IF EXISTS CPURegistersMRView_json ; create view CPURegistersMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/CPURegisters';
        DROP VIEW IF EXISTS CPUSensorMRView_json ; create view CPUSensorMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/CPUSensor';
        DROP VIEW IF EXISTS CUPSMRView_json ; create view CUPSMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/CUPS';
        DROP VIEW IF EXISTS FCSensorMRView_json ; create view FCSensorMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/FCSensor';
        DROP VIEW IF EXISTS FPGASensorMRView_json ; create view FPGASensorMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/FPGASensor';
        DROP VIEW IF EXISTS FanSensorMRView_json ; create view FanSensorMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/FanSensor';
        DROP VIEW IF EXISTS GPUMetricsMRView_json ; create view GPUMetricsMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/GPUMetrics';
        DROP VIEW IF EXISTS GPUStatisticsMRView_json ; create view GPUStatisticsMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/GPUStatistics';
        DROP VIEW IF EXISTS MemorySensorMRView_json ; create view MemorySensorMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/MemorySensor';
        DROP VIEW IF EXISTS NICSensorMRView_json ; create view NICSensorMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/NICSensor';
        DROP VIEW IF EXISTS NICStatisticsMRView_json ; create view NICStatisticsMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/NICStatistics';
        DROP VIEW IF EXISTS NVMeSMARTDataMRView_json ; create view NVMeSMARTDataMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/NVMeSMARTData';
        DROP VIEW IF EXISTS PSUMetricsMRView_json ; create view PSUMetricsMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/PSUMetrics';
        DROP VIEW IF EXISTS PowerMetricsMRView_json ; create view PowerMetricsMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/PowerMetrics';
        DROP VIEW IF EXISTS PowerStatisticsMRView_json ; create view PowerStatisticsMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/PowerStatistics';
        DROP VIEW IF EXISTS SensorMRView_json ; create view SensorMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/Sensor';
        DROP VIEW IF EXISTS StorageDiskSMARTDataMRView_json ; create view StorageDiskSMARTDataMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/StorageDiskSMARTData';
        DROP VIEW IF EXISTS StorageSensorMRView_json ; create view StorageSensorMRView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/StorageSensor';
        DROP VIEW IF EXISTS ThermalSensorMRView_json ; create view ThermalSensorMRView_json as select * from  JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/ThermalSensor';
        DROP VIEW IF EXISTS ThermalMetricsMRView_json ; create view ThermalMetricsMRView_json as select * from  JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports/ThermalMetrics';

        DROP VIEW IF EXISTS MetricReportCollectionView_json ; create view MetricReportCollectionView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReports';
        DROP VIEW IF EXISTS MetricReportDefinitionCollectionView_json ; create view MetricReportDefinitionCollectionView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricReportDefinitions';

        DROP VIEW IF EXISTS MetricDefinitionCollectionView_json ; -- create view MetricDefinitionCollectionView_json as select * from JSON  where [@odata.id] = '/redfish/v1/TelemetryService/MetricDefinitions';
        DROP VIEW IF EXISTS MetricDefinitionView_json ;           -- create view MetricDefinitionView_json as select * from JSON where [@odata.id] = '/redfish/v1/TelemetryService/MetricDefinitions/';
        DROP VIEW IF EXISTS TelemetryServiceView_json ;           -- create view TelemetryServiceView_json as select * from JSON;
        DROP VIEW IF EXISTS TelemetryLogServiceLCLogview_json ;   -- create view TelemetryLogServiceLCLogview_json as select * from JSON;

# Logging levels:
# debug, info, warn, error, crit
#
# The 'logs' config is an ARRAY of output configurations. Below are the valid configuration options for each config.
#
# Enabled: disable or enable this specific logger entirely.
#       DEFAULT: disabled/false
#
# FileName: Specify "FileName" to send log output from that config to a file.
#       DEFAULT: /dev/stderr
#
# Level: will globally enable all logs at the specified level or higher. Leave this out to specify on a module by module basis
#       DEFAULT: (none) - no filtering, all logs output
#
# PrintFile: append the file name and line number of the location where the log function was called
#       DEFAULT: false
#
# PrintFunction: append the name of the function that called the log function
#       DEFAULT: false
#
# ModulesToEnable is an ARRAY
#   give 'name' to specify the name of a 'module', to show all output from all log statements tagged with that module (regardless of the global log level setting)
#   give 'level' to filter the module output to the specified log level and higher.
#
logs:
    # Log warnings and Crit to stderr (everything else to log file, below)
    - Enabled: true
      Level: "warn"
      PrintFile: true
      PrintFunction: true

    # log all web server accesses
    - Enabled: false
      Level: "debug"
      FileName: "debug.log"
      PrintFile: true
      PrintFunction: true

    # (DISABLED) log stuff on a module by module basis to FILE
    - Enabled: false
      FileName: "/var/log/metric-engine.log"
      Level: "debug"
      PrintFile: true
      PrintFunction: true
      ModulesToEnable:
        # all of the loggers below support a heirarchical arrangement where
        # you can turn on debugging for all modules with (eg.)
        # "Managers/CMC.Integrated", and you can selectively enable
        # debugging for a single module by adding the full fqdd, eg.
        # "Managers/CMC.Integrated.1". For the template config, we only
        # specify the top levels
        - name: "Managers/CMC.Integrated"
          level: "crit"



